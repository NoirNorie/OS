
This program, mlfq.py, allows you to see how the MLFQ scheduler presented in this chapter behaves.
이 프로그램 인 mlfq.py를 사용하면이 장에 제시된 MLFQ 스케줄러의 동작을 확인할 수 있습니다.

As before, you can use this to generate problems for yourself using random seeds,
or use it to construct a carefully-designed experiment to see how MLFQ works under different circumstances.
이전과 마찬가지로 이 기능을 사용하여 임의의 시드를 사용하여 문제를 생성하거나
신중하게 설계된 실험을 구성하여 다양한 상황에서 MLFQ가 어떻게 작동하는지 확인할 수 있습니다.

To run the program, type: prompt> ./mlfq.py
프로그램을 실행하려면 prompt> ./mlfq.py를 입력하십시오.

Use the help flag (-h) to see the options:
옵션을 보려면 help 플래그 (-h)를 사용하십시오.

Usage: mlfq.py [options]
Options:

  -h, --help            show this help message and exit
  -h, --help이 도움말 메시지를 표시하고 종료

  -s SEED, --seed=SEED  the random seed
  -s SEED, --seed = 임의의 시드

  -n NUMQUEUES, --numQueues=NUMQUEUES / number of queues in MLFQ (if not using -Q)
  -n NUMQUEUES, --numQueues = NUMQUEUES / MLFQ의 대기열 수 (-Q를 사용하지 않는 경우)

  -q QUANTUM, --quantum=QUANTUM / length of time slice (if not using -Q)
  -q QUANTUM, --quantum = QUANTUM / 타임 슬라이스 길이 (-Q를 사용하지 않는 경우)

  -Q QUANTUMLIST, --quantumList=QUANTUMLIST
	length of time slice per queue level,  specified as x,y,z,...
	where x is the quantum length for the highest-priority queue, 
	y the next highest, and so forth
            큐 레벨 당 시간 슬라이스 길이로, x, y, z, ...로 지정됩니다.
	여기서 x는 우선 순위가 가장 높은 큐의 양자 길이,
	y가 다음으로 가장 높은 큐입니다.           
                                            
  -j NUMJOBS, --numJobs=NUMJOBS / number of jobs in the system
  -j NUMJOBS, --numJobs = NUMJOBS 시스템의 작업 수

  -m MAXLEN, --maxlen=MAXLEN / max run-time of a job (if random)
  -m MAXLEN, --maxlen = MAXLEN / 작업의 최대 런타임 (임의의 경우)                       
  
  -M MAXIO, --maxio=MAXIO max I/O frequency of a job (if random)
  -M MAXIO, --maxio = MAXIO 작업의 최대 I / O 빈도 (임의의 경우)
                     
  -B BOOST, --boost=BOOST
                        how often to boost the priority of all jobs back to high priority (0 means never)
		모든 작업의 우선 순위를 다시 높은 우선 순위로 다시 올리는 빈도 (0이 되어서는 안됨)

  -i IOTIME, --iotime=IOTIME / how long an I/O should last (fixed constant)
  -i IOTIME, --iotime = IOTIME / I / O 지속 시간 (고정 상수)

  -S, --stay  reset and stay at same priority level  / when issuing I/O
  -S,-재설정 상태 유지 및 I / O 발행시 동일한 우선 순위 수준 유지

  -l JLIST, --jlist=JLIST
                        a comma-separated list of jobs to run, in the form x1,y1,z1:x2,y2,z2:... where 
                        x is start time, y is run time, and z is how often the job issues an I/O request
		x1, y1, z1 : x2, y2, z2 :
		x는 시작 시간, y는 실행 시간, z는 작업이 얼마나 자주 I / O 요청할지

  -c                    compute answers for me
		계산
]

There are a few different ways to use the simulator. One way is to generate
some random jobs and see if you can figure out how they will behave given the
MLFQ scheduler. For example, if you wanted to create a randomly-generated
three-job workload, you would simply type:

시뮬레이터를 사용하는 몇 가지 방법이 있습니다.
한 가지 방법은 임의의 작업을 생성하고 MLFQ 스케줄러가 제공되는 작업을 파악할 수 있는지 확인하는 것입니다.
예를 들어, 무작위로 생성 된 3 개 작업 워크로드를 생성하려면 다음을 입력하면됩니다.

---------------------------------------------------------------
prompt> ./mlfq.py -j 3
---------------------------------------------------------------

What you would then see is the specific problem definition:
그러면 다음과 같은 특정 문제 정의가 나타납니다.

---------------------------------------------------------------
Here is the list of inputs:
OPTIONS jobs 3
OPTIONS queues 3
OPTIONS quantum length for queue  2 is  10
OPTIONS quantum length for queue  1 is  10
OPTIONS quantum length for queue  0 is  10
OPTIONS boost 0
OPTIONS ioTime 0
OPTIONS stayAfterIO False
---------------------------------------------------------------

For each job, three defining characteristics are given:
각 작업에 대해 세 가지 정의 특성이 제공됩니다.

startTime : at what time does the job enter the system
startTime : 작업이 시스템에 들어가는 시간

runTime   : the total CPU time needed by the job to finish
runTime : 작업 완료에 필요한 총 CPU 시간

ioFreq    : every ioFreq time units, the job issues an I/O (the I/O takes ioTime units to complete)
ioFreq : 모든 ioFreq 시간 단위에서 작업이 I / O를 발행합니다 (I / O는 ioTime 단위를 완료하는 데 소요됨)
---------------------------------------------------------------
Job List:
  Job  0: startTime   0 - runTime  84 - ioFreq   7
  Job  1: startTime   0 - runTime  42 - ioFreq   2
  Job  2: startTime   0 - runTime  51 - ioFreq   4
---------------------------------------------------------------

Compute the execution trace for the given workloads.
주어진 워크로드에 대한 실행 추적을 계산하십시오.
If you would like, also compute the response and turnaround times for each of the jobs.
원하는 경우 각 작업에 대한 응답 및 처리 시간도 계산하십시오.

Use the -c flag to get the exact results when you are finished.
완료되면 정확한 결과를 얻으려면 -c 플래그를 사용하십시오.

This generates a random workload of three jobs (as specified), on the default
number of queues with a number of default settings. If you run again with the
solve flag on (-c), you'll see the same print out as above, plus the
이렇게하면 여러 가지 기본 설정이있는 기본 대기열 수에서 세 가지 작업 (지정된대로)의 임의의 작업 부하가 생성됩니다.
계산 플래그를 (-c)로 다시 실행하면 위와 동일한 인쇄 결과와

following:

Execution Trace:

[ time 0 ] JOB BEGINS by JOB 0
[ time 0 ] JOB BEGINS by JOB 1
[ time 0 ] JOB BEGINS by JOB 2
[ time 0 ] Run JOB 0 at PRIORITY 2 [ TICKS 9 ALLOT 1 TIME 83 (of 84) ]
[ time 1 ] Run JOB 0 at PRIORITY 2 [ TICKS 8 ALLOT 1 TIME 82 (of 84) ]
[ time 2 ] Run JOB 0 at PRIORITY 2 [ TICKS 7 ALLOT 1 TIME 81 (of 84) ]
[ time 3 ] Run JOB 0 at PRIORITY 2 [ TICKS 6 ALLOT 1 TIME 80 (of 84) ]
[ time 4 ] Run JOB 0 at PRIORITY 2 [ TICKS 5 ALLOT 1 TIME 79 (of 84) ]
[ time 5 ] Run JOB 0 at PRIORITY 2 [ TICKS 4 ALLOT 1 TIME 78 (of 84) ]
[ time 6 ] Run JOB 0 at PRIORITY 2 [ TICKS 3 ALLOT 1 TIME 77 (of 84) ]
[ time 7 ] IO_START by JOB 0
IO DONE
[ time 7 ] Run JOB 1 at PRIORITY 2 [ TICKS 9 ALLOT 1 TIME 41 (of 42) ]
[ time 8 ] Run JOB 1 at PRIORITY 2 [ TICKS 8 ALLOT 1 TIME 40 (of 42) ]
[ time 9 ] Run JOB 1 at PRIORITY 2 [ TICKS 7 ALLOT 1 TIME 39 (of 42) ]
...

Final statistics:
  Job  0: startTime   0 - response   0 - turnaround 175
  Job  1: startTime   0 - response   7 - turnaround 191
  Job  2: startTime   0 - response   9 - turnaround 168

  Avg  2: startTime n/a - response 5.33 - turnaround 178.00
]
---------------------------------------------------------------
The trace shows exactly, on a millisecond-by-millisecond time scale, what the scheduler decided to do.
추적은 스케줄러가 수행하기로 결정한 작업을 밀리 초별 밀리 초 단위로 정확하게 표시합니다.

In this example, it begins by running Job 0 for 7 ms until Job 0 issues an I/O
this is entirely predictable, as Job 0's I/O frequency is set to 7 ms, meaning that every 7 ms it runs,
it will issue an I/O and wait for it to complete before continuing.

이 예제에서는 Job 0이 I / O를 발행 할 때까지 7ms 동안 Job 0을 실행하여 시작합니다. 
이는 Job 0의 I / O 주파수가 7ms로 설정되므로 완전히 예측 가능합니다. 
즉, 7ms가 실행될 때마다 I / O를 발행하고 계속하기 전에 완료 될 때까지 기다립니다.

At that point, the scheduler switches to Job 1, which only runs 2 ms before issuing an I/O.
이 시점에서 스케줄러는 작업 1로 전환되며 I / O를 실행하기 전에 2ms 만 실행됩니다.

The scheduler prints the entire execution trace in this manner,
and finally also computes the response and turnaround times for each job as well as an average.
스케줄러는 이러한 방식으로 전체 실행 추적을 인쇄하고 
마지막으로 각 작업에 대한 응답 및 처리 시간과 평균을 계산합니다.

---------------------------------------------------------------
You can also control various other aspects of the simulation.
시뮬레이션의 다른 여러 측면을 제어 할 수도 있습니다.

For example, you can specify how many queues you'd like to have in the system (-n) and what the quantum length should be for all of those queues (-q)
if you want even more control and varied quantam length per queue, you can instead specify the length of the quantum (time slice) for each queue with -Q
e.g., -Q 10,20,30 simulates a scheduler with three queues
with the highest-priority queue having a 10-ms time slice, the next-highest a 20-ms time-slice, and the low-priority queue a 30-ms time slice.

예를 들어, 시스템에 원하는 큐 수 (-n)와 모든 큐에 대한 퀀텀 길이 (-q)를 지정할 수 있습니다.
큐당 더 많은 제어 및 다양한 퀀텀 길이를 원하는 경우 -Q를 사용하여 각 큐의 퀀텀 (시간 조각) 길이를 지정할 수 있습니다.
예를 들어, -Q 10,20,30은 3 개의 큐로 스케줄러를 시뮬레이션합니다.
최상위 큐는 10-ms 타임 슬라이스를 다음으로 가장 높은 20-ms 타임 슬라이스를 갖고, 우선 순위가 낮은 큐는 30-ms 타임 슬라이스를 가집니다.
---------------------------------------------------------------

You can separately control how much time allotment there is per queue too.
대기열 당 할당 시간도 별도로 제어 할 수 있습니다.

This can be set for all queues with -a, or per queue with -A
-a를 사용하는 모든 큐 또는 -A를 사용하는 큐마다 설정할 수 있습니다.

e.g., -A 20,40,60 sets the time allotment per queue to 20ms, 40ms, and 60ms, respectively. 
예를 들어, -A 20,40,60은 큐당 시간 할당을 각각 20ms, 40ms 및 60ms로 설정합니다.

---------------------------------------------------------------
If you are randomly generating jobs, you can also control how long they might run for (-m), or how often they generate I/O (-M).
작업을 무작위로 생성하는 경우 작업이 얼마나 오래 실행 될지 (-m) 또는 얼마나 자주 I / O를 생성하는지 (-M)를 제어 할 수 있습니다.
If you, however, want more control over the exact characteristics of the jobs running in the system, you can use -l (lower-case L) or --jlist, which allows you to specify the exact set of jobs you wish to simulate.
그러나 시스템에서 실행중인 작업의 정확한 특성을보다 세밀하게 제어하려면 -l (소문자 L) 또는 --jlist를 사용하여 시뮬레이션하려는 정확한 작업 세트를 지정할 수 있습니다. .

The list is of the form: x1,y1,z1:x2,y2,z2:...

where x is the start time of the job, y is the run time (i.e., how much CPU time it needs), and z the I/O frequency (i.e., after running z ms, the job issues an I/O; if z is 0, no I/Os are issued).
여기서 x는 작업의 시작 시간이고, y는 런타임 (예 : 필요한 CPU 시간)이며 z는 I / O 빈도 (z ms를 실행 한 후 작업이 I / O를 발행 함) (z는 0이면 I / O가 발생되지 않습니다.)

For example, if you wanted to recreate the example in Figure 8.3
예를 들어, 그림 8.3의 예제를 다시 작성하려는 경우
you would specify a job list as follows:
다음과 같이 작업 목록을 지정하십시오.

---------------------------------------------------------------

prompt> ./mlfq.py --jlist 0,180,0:100,20,0 -q 10 

---------------------------------------------------------------
Running the simulator in this way creates a three-level MLFQ, with each levelhaving a 10-ms time slice.
이런 방식으로 시뮬레이터를 실행하면 3 레벨 MLFQ가 생성되며 각 레벨은 10ms 타임 슬라이스를 갖습니다.

Two jobs are created: Job 0 which starts at time 0, runs for 180 ms total, and never issues an I/O
작업 0은 시간 0에서 시작하여 총 180ms 동안 실행되며 I / O를 실행하지 않는 작업 2 개가 작성됩니다.

Job 1 starts at 100 ms, needs only 20 ms of CPU time to complete, and also never issues I/Os.
작업 1은 100ms에서 시작하고 완료하는 데 20ms의 CPU 시간 만 필요하며 I / O도 발행하지 않습니다.

---------------------------------------------------------------

Finally, there are three more parameters of interest.
마지막으로, 관심있는 파라미터가 세 개 더 있습니다.

The -B flag, if set to a non-zero value, boosts all jobs to the highest-priority queue every N milliseconds, when invoked 
-B 플래그가 0이 아닌 값으로 설정되면 모든 작업이 호출 될 때 N 밀리 초마다 가장 높은 우선 순위 큐로 증가합니다.  
as such: prompt> ./mlfq.py -B N 
이런 명령 쓰면> ./mlfq.py -B N 

The scheduler uses this feature to avoid starvation as discussed in the chapter.
스케줄러는이 기능을 사용하여 장에서 논의 된대로 기아 상태를 피합니다.

However, it is off by default.
그러나 기본적으로 해제되어 있습니다.

---------------------------------------------------------------

The -S flag invokes older Rules 4a and 4b,
which means that if a job issues an I/O before completing its time slice,
it will return to that same priority queue when it resumes execution, with its full time-slice intact.
-S 플래그는 이전 규칙 4a 및 4b를 호출합니다.
즉, 타임 슬라이스를 다 쓰기 전에 작업이 I/ O를 발행하면
실행을 재개 할 때 전체 시간 분할이 그대로 유지되면서 동일한 우선 순위 큐로 돌아갑니다. (= 우선순위가 높은 큐에 남아있는다)

This enables gaming of the scheduler.
게이밍이 뭔 말인지 모르겠지만 조작할 수 있다는 것 같음

Finally, you can easily change how long an I/O lasts by using the -i flag.
마지막으로 -i 플래그를 사용하여 I / O 지속 시간을 쉽게 변경할 수 있습니다.
By default in this simplistic model, each I/O takes a fixed amount of time of 5milliseconds or whatever you set it to with this flag.
이 단순한 모델에서는 기본적으로 각 I / O의 고정 시간이 5 밀리 초 또는이 플래그로 설정 한 시간이 걸립니다.

You can also play around with whether jobs that just complete an I/O are moved to the head of the queue they are in or to the back, with the -I flag.
I / O를 완료 한 작업이 -I 플래그를 사용하여 작업중인 큐의 헤드로 이동하는지 또는 후면으로 이동하는지 여부에 따라 작업 할 수도 있습니다.

Check it out, it's fun! 
그것을 확인해 봐라, 재미있다!